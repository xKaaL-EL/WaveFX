package Exploit.org;

import javax.swing.*;
import java.io.File;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Objects;


public class WaveFX {

    //Some private Fields..
    private final LinkedList<Track> trackList = new LinkedList<>();
    private final LinkedList<Album> albumList = new LinkedList<>();
    private final LinkedList<Playlist> playlistsCollection = new LinkedList<>();

    //Getters for the fields..
    private LinkedList<Track> getTrackList() {
        return trackList;
    }

    private LinkedList<Album> getAlbumList() {
        return albumList;
    }

    private LinkedList<Playlist> getPlaylistsCollection() {
        return playlistsCollection;
    }

    //The main public constructor creating WaveFX along with fetching data and creating dependencies.
    public WaveFX() {
        this.extractPathAndCreateTracks();
        this.createAndStoreInAlbums();
        Favorites favorites = new Favorites();
        this.getPlaylistsCollection().add(favorites);
    }

    //Function for Auto-Synchronize Directory..
    private void extractPathAndCreateTracks() {
        File[] directory = new File("src/Exploit/org/TrackStore/Music").listFiles();

        for (int i = 0; i < Objects.requireNonNull(directory).length; i++) {
            File file = directory[i];
            if (file.isFile()) {
                Track track = new Track(file.getPath());
                this.getTrackList().add(track);
            }
        }

    }

    //Creating and adding dependencies before starting..
    private void createAndStoreInAlbums() {
        for (Track track : this.getTrackList()) {
            ListIterator<Album> albumListIterator = this.getAlbumList().listIterator();
            boolean isAddedToAlbum = false;

            while (albumListIterator.hasNext()) {
                if (albumListIterator.next().getAlbumName().equalsIgnoreCase(track.getTrackArtist())) {
                    albumListIterator.previous().addTrackToAlbum(track);
                    isAddedToAlbum = true;
                    break;
                }
            }

            if (!isAddedToAlbum) {
                Album album = new Album(track);
                albumListIterator.add(album);
            }

        }

    }

    //Function for basic GUI implementation.
    private String displayDialogBox(String[] options, String message) {
        Icon icon = new ImageIcon("src/Exploit/org/TrackStore/Wave.png");
        return (String) JOptionPane.showInputDialog(null,
                message,
                "WaveFX™",
                JOptionPane.INFORMATION_MESSAGE,
                icon,
                options,
                null);
    }

//Methods for the implementation of Tracks module-----------------------------------------------------------------

    //Function for renaming track..
    private boolean renameTrack() {
        ListIterator<Track> trackListIterator = this.getTrackList().listIterator();//setting list iterator
        //on track linked-list.
        String response = this.displayDialogBox(this.trackArrayList(), "Select track to rename : ");
        if (response == null) {
            return false;
        }

        while (trackListIterator.hasNext()) {
            if (trackListIterator.next().getTrackName().equals(response)) {
                return trackListIterator.previous().renameTheTrack();
            }
        }

        return false;
    }

    //Function for playing tracks one-by-one stored in track linked-list..
    private boolean playTracksSequentially() {
        ListIterator<Track> trackListIterator = this.getTrackList().listIterator();
        boolean isGoingForward = true;
        int flag = trackListIterator.next().waveFxPlayer();

        while (flag != 0) {
            if (flag == 1) {
                if (isGoingForward) {
                    if (trackListIterator.hasPrevious()) {
                        trackListIterator.previous();
                    }
                    isGoingForward = false;
                }

                if (trackListIterator.hasPrevious()) {
                    flag = trackListIterator.previous().waveFxPlayer();
                } else {
                    //This is the start of the list or Head element of the linked list.
                    flag = trackListIterator.next().waveFxPlayer();
                }

            }

            if (flag == 5) {
                if (!isGoingForward) {
                    if (trackListIterator.hasNext()) {
                        trackListIterator.next();
                    }
                    isGoingForward = true;
                }

                if (trackListIterator.hasNext()) {
                    flag = trackListIterator.next().waveFxPlayer();
                } else {
                    //This is the End of the list.
                    flag = trackListIterator.previous().waveFxPlayer();
                }

            }
            if (flag == 0) {
                return true;
            }
        }

        return false;
    }

    //Function used for getting track-names stored in track linked list..
    // (Only used when user wants to play tracks one-by-one)..
    private String[] trackArrayList() {
        String[] trackListArray = new String[this.getTrackList().size()];
        ListIterator<Track> playListIterator = this.getTrackList().listIterator();

        for (int i = 0; i < this.getTrackList().size(); i++) {
            trackListArray[i] = playListIterator.next().getTrackName();
        }
        return trackListArray;
    }

    //Function used to remove tracks stored in track linked list..
    private boolean removeTracks() {
        ListIterator<Track> trackListIterator = this.getTrackList().listIterator();
        String response = this.displayDialogBox(this.trackArrayList(), "Select track to remove : ");

        if (response == null) {
            return false;
        }

        while (trackListIterator.hasNext()) {
            if (trackListIterator.next().getTrackName().equals(response)) {
                trackListIterator.remove();
                return true;
            }
        }

        return false;
    }
//Function used for displaying tracks and trigger operations on selected tracks.
    //(Only used when the user wants to select track he want to play.)

    private boolean displayTracksAndTriggerOperations() {
        String response = this.displayDialogBox(this.trackArrayList(), "Select from available Tracks : ");
        ListIterator<Track> trackListIterator = this.getTrackList().listIterator();

        while (trackListIterator.hasNext()) {
            if (trackListIterator.next().getTrackName().equals(response)) {
                return showOperationsOnTrack(trackListIterator.previous());
            }
        }

        return false;
    }

    //A special Function used for adding tracks to playlists and favorites and play selected tracks.
    private boolean showOperationsOnTrack(Track track) {
        String[] options = {"Play Track", "Add to Playlist", "Add to Favorites"};
        String response = this.displayDialogBox(options, "Select operation to perform on Track : ");

        if (!(response == null)) {
            switch (response) {
                case "Play Track":
                    int flag = track.waveFxPlayer();
                    if (flag == 1 || flag == 5) {
                        return this.playTracksSequentially();
                    }
                    break;

                case "Add to Playlist":
                    String playlistName = this.displayAvailablePlaylist(); //return object playlist.

                    if (playlistName.equals("Create new Playlist")) {
                        Playlist playlist = this.createPlaylist(); //return object playlist.

                        if (!(playlist == null)) {
                            return track.addTrackToPlaylist(playlist);
                        }

                        return false;
                    }

                    for (Playlist playlist : this.getPlaylistsCollection()) {
                        if (playlist.getPlayListName().equals(playlistName)) {
                            return track.addTrackToPlaylist(playlist);
                        }
                    }
                    break;

                case "Add to Favorites":
                    for (Playlist playlist : this.getPlaylistsCollection()) {
                        if (playlist.getPlayListName().equals("Favorites")) {
                            return track.addTrackToPlaylist(playlist);
                        }
                    }
                    break;
            }
        }

        return false;
    }

    //Main function of track module to control all the other functions and features..
    private boolean operationsOnTrack() {
        String[] options = {"Display Tracks", "Play Tracks", "Rename tracks", "Remove Tracks"};
        String response = this.displayDialogBox(options, "Select operation to perform on Tracks : ");

        if (!(response == null)) {
            switch (response) {
                case "Display Tracks":
                    return this.displayTracksAndTriggerOperations();
                case "Play Tracks":
                    return this.playTracksSequentially();
                case "Rename Tracks":
                    return this.renameTrack();
                case "Remove Tracks":
                    return this.removeTracks();
            }
        }
        return false;
    }

    //--------------------------------------------------------------------------------------------------------

//Methods for the implementation of Album module-----------------------------------------------------------------

    //Function used for getting only album-names stored in album linked list..
    private String[] albumArrayList() {
        String[] albumListArray = new String[this.getAlbumList().size()];
        ListIterator<Album> albumListIterator = this.getAlbumList().listIterator();

        for (int i = 0; i < this.getAlbumList().size(); i++) {
            albumListArray[i] = albumListIterator.next().getAlbumName();
        }
        return albumListArray;
    }

    //Function used for displaying album-names and triggering albumDriver() function(n) based on the passed response.
    private boolean displayAvailableAlbums() {
        String response = this.displayDialogBox(this.albumArrayList(), "Select from available albums : ");
        ListIterator<Album> albumListIterator = this.getAlbumList().listIterator();

        while (albumListIterator.hasNext()) {
            if (albumListIterator.next().getAlbumName().equals(response)) {
                return albumListIterator.previous().albumDriverCode();
            }
        }
        return false;
    }

//-------------------------------------------------------------------------------------------------------------------

//Methods for the implementation of Play-List/Favorites modules-----------------------------------------------------------------

    //Function used for getting only playlist-names stored in playlist collection linked-list..
    private String[] playlistArray() {
        String[] playlistArray = new String[this.getPlaylistsCollection().size() + 1];
        ListIterator<Playlist> playlistIterator = this.getPlaylistsCollection().listIterator();
        int i = 0;

        while (i < this.getPlaylistsCollection().size()) {
            playlistArray[i] = playlistIterator.next().getPlayListName();
            i++;
        }

        playlistArray[i] = "Create new Playlist";
        return playlistArray;
    }

    //Function used for displaying names of available playlist and return response based on selected option..
    private String displayAvailablePlaylist() {
        return this.displayDialogBox(this.playlistArray(), "Select from available Playlists : ");
    }

    //Function used for creating new playlist..
    private Playlist createPlaylist() {
        String response = this.displayDialogBox(null, "Enter a name for the new Playlist : ");
        if (response == null) {
            return null;
        }

        Playlist playlist = new Playlist(response);
        this.getPlaylistsCollection().add(playlist);
        return playlist;
    }

    //Function used for triggering operations on selected playlist, that it gets as a parameter).
    //(if user selected "create a new playlist" option it can call createPlaylist() fn.)
    private boolean showOperationsOnPlaylist(String playlistName) { //call it in driver
        if (!(playlistName == null)) {
            if (playlistName.equals("Create new Playlist")) {
                this.createPlaylist();
                return true;
            }
            ListIterator<Playlist> playlistIterator = this.getPlaylistsCollection().listIterator();

            while (playlistIterator.hasNext()) {
                if (playlistIterator.next().getPlayListName().equals(playlistName)) {
                    return playlistIterator.previous().playListDriverCode();
                }
            }
        }
        return false;
    }

    //Main function of playlist/favorites module to control all the other functions and features..
    private boolean operationsOnPlaylist() {
        String[] options = {"Display Playlist", "Delete Playlist"};
        String response = this.displayDialogBox(options, "Select operation to perform on Playlist : ");

        if (!(response == null)) {
            if (response.equals("Display Playlist")) {
                return this.showOperationsOnPlaylist(this.displayAvailablePlaylist());//ERROR SOLVE IT
            } else if (response.equals("Delete Playlist")) {
                String toBeDeleted = this.displayAvailablePlaylist();
                ListIterator<Playlist> playlistIterator = this.getPlaylistsCollection().listIterator();

                while (playlistIterator.hasNext()) {
                    if (playlistIterator.next().getPlayListName().equals(toBeDeleted)) {
                        playlistIterator.remove();
                        return true;
                    }
                }
                return false;
            }

        }
        return false;
    }
//------------------------------------------------------------------------------------------------------------------

    //Function for holding screen for a while..
    public void onDelay(int milliseconds, String message) {
        try {
            System.out.println(message);
            Thread.sleep(milliseconds);
        } catch (InterruptedException ex) {
            Thread.currentThread().interrupt();
        }
    }

    //The only accessible function of WaveFX, to drive all the modules efficiently.
    public String WaveFXDriver() {
        String response = "Initialising Fields...";
        this.onDelay(3000, response);
        this.onDelay(2000, "Fetching Binaries..");
        this.onDelay(2000, "Creating Dependencies.");
        this.onDelay(2000, "<Starting WaveFX>");

        while (!(response == null)) {
            String[] options = {"Tracks", "Albums", "PlayLists", "Favorites"};
            response = this.displayDialogBox(options, "WaveFX Audio Player : ");
            if (!(response == null)) {
                switch (response) {
                    case "Tracks":
                        operationsOnTrack();
                        break;
                    case "Albums":
                        displayAvailableAlbums();
                        break;
                    case "PlayLists":
                        operationsOnPlaylist();
                        break;
                    case "Favorites":
                        showOperationsOnPlaylist("Favorites");
                        break;
                }
            }
        }
        this.onDelay(3000, "\n\nTerminating Sessions...");
        this.onDelay(2500, "Releasing Dynamic Spaces..");
        return "<> with ❤❤.";
    }
}
