package Exploit.org;

import javax.swing.*;
import java.io.File;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Objects;

public class WaveFX {
    private final LinkedList<Track> trackList = new LinkedList<>();
    private final LinkedList<Album> albumList = new LinkedList<>();
    private final LinkedList<Playlist> playlistsCollection = new LinkedList<>();

    public LinkedList<Track> getTrackList() {
        return trackList;
    }

    public LinkedList<Album> getAlbumList() {
        return albumList;
    }

    public WaveFX() {
        this.extractPathAndCreateTracks();
        this.createAndStoreInAlbums();
    }

    private boolean extractPathAndCreateTracks() {
        File[] directory = new File("src/Exploit/org/Trackstore/Music").listFiles();
        for (int i = 0; i < Objects.requireNonNull(directory).length; i++) {
            File file = directory[i];
            if (file.isFile()) {
                Track track = new Track(file.getPath());
                this.trackList.add(track);
            }
        }
        return true;
    }

    private boolean createAndStoreInAlbums() {
        for (int i = 0; i < this.trackList.size(); i++) {
            Track track = this.trackList.get(i);
            ListIterator<Album> albumListIterator = this.albumList.listIterator();
            boolean isAddedToAlbum = false;
            while (albumListIterator.hasNext()) {
                if (albumListIterator.next().getAlbumName().equals(track.getTrackArtist())) {
                    albumListIterator.previous().addTrackToAlbum(track);
                    isAddedToAlbum = true;
                    break;
                }
            }
            if (!isAddedToAlbum) {
                Album album = new Album(track);
                albumListIterator.add(album);
            }
        }
        return true;
    }

    public boolean renameTrack() {
        ListIterator<Track> trackListIterator = this.trackList.listIterator();
        Icon icon = new ImageIcon("src/Exploit/org/Trackstore/WaveFX.png");
        String response = (String) JOptionPane.showInputDialog(null,
                "Select track to rename : ",
                "WaveFX",
                JOptionPane.INFORMATION_MESSAGE,
                icon,
                this.trackArrayList(),
                null);
        if (response == null) {
            return false;
        }
        while (trackListIterator.hasNext()) {
            if (trackListIterator.next().getTrackName().equals(response)) {
               return trackListIterator.previous().renameTheTrack();
            }
        }
        return false;
    }

    public boolean playTracksSequentially() {
        ListIterator<Track> trackListIterator = this.trackList.listIterator();
        int flag;
        boolean isGoingForward = true;
        flag = trackListIterator.next().waveFxPlayer();
        while (flag != 0) {
            if (flag == 1) {
                if (isGoingForward) {
                    if (trackListIterator.hasPrevious()) {
                        trackListIterator.previous();
                    }
                    isGoingForward = false;
                }
                if (trackListIterator.hasPrevious()) {
                    flag = trackListIterator.previous().waveFxPlayer();
                } else {
                    //This is the start of the list or Head element of the linked list.
                    flag = trackListIterator.next().waveFxPlayer();
                }
            }

            if (flag == 5) {
                if (!isGoingForward) {
                    if (trackListIterator.hasNext()) {
                        trackListIterator.next();
                    }
                    isGoingForward = true;
                }
                if (trackListIterator.hasNext()) {
                    flag = trackListIterator.next().waveFxPlayer();
                } else {
                    //This is the End of the list.
                    flag = trackListIterator.previous().waveFxPlayer();
                }
            }
            if (flag == 0) {
                return true;
            }
        }
        return false;
    }

    public boolean playSelectedTracks() {
        ListIterator<Track> trackListIterator = this.trackList.listIterator();
        Icon icon = new ImageIcon("src/Exploit/org/Trackstore/WaveFX.png");
        String response = (String) JOptionPane.showInputDialog(null,
                "Select track from Playlist to Play : ",
                "WaveFX",
                JOptionPane.INFORMATION_MESSAGE,
                icon,
                this.trackArrayList(),
                null);
        if (response == null) {
            return false;
        }
        while (trackListIterator.hasNext()) {
            if (trackListIterator.next().getTrackName().equals(response)) {
                int flag = trackListIterator.previous().waveFxPlayer();
                if (flag == 1 || flag == 5) {
                    this.playTracksSequentially();
                }
                return true;
            }
        }
        return false;
    }

    private String[] trackArrayList() {
        String[] trackListArray = new String[this.trackList.size()];
        ListIterator<Track> playListIterator = this.trackList.listIterator();
        for (int i = 0; i < this.trackList.size(); i++) {
            trackListArray[i] = playListIterator.next().getTrackName();
        }
        return trackListArray;
    }

    public boolean removeTracks() {
        ListIterator<Track> trackListIterator = this.trackList.listIterator();
        Icon icon = new ImageIcon("src/Exploit/org/Trackstore/WaveFX.png");
        String response = (String) JOptionPane.showInputDialog(null,
                "Select track to remove : ",
                "WaveFX",
                JOptionPane.INFORMATION_MESSAGE,
                icon,
                this.trackArrayList(),
                null);
        if (response == null) {
            return false;
        }
        while (trackListIterator.hasNext()) {
            if (trackListIterator.next().getTrackName().equals(response)) {
                trackListIterator.remove();
                return true;
            }
        }
        return false;
    }
}
