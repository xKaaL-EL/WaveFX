package Exploit.org;

import javax.swing.*;
import java.util.LinkedList;
import java.util.ListIterator;

public class Album {
    //Some private Fields..
    private final LinkedList<Track> trackList = new LinkedList<>();
    private final String albumName;

    //Parametrized-Constructor for creating an album objects..
    //user were not allowed to create albums neither they have permission to add tracks.They are created and destroyed.
    // by the program itself based on the track's artist name..
    public Album(Track track) {
        this.albumName = track.getTrackArtist();
        addTrackToAlbum(track);
    }

    //Some getters for the field..
    public LinkedList<Track> getTrackList() {
        return trackList;
    }

    public String getAlbumName() {
        return albumName;
    }

    //Adding tracks to a album lexicographically..
    public boolean addTrackToAlbum(Track track) {
        ListIterator<Track> trackListIterator = this.getTrackList().listIterator();

        while (trackListIterator.hasNext()) {
            int comparison = trackListIterator.next().getTrackName().compareTo(track.getTrackName());

            if (comparison > 0) {
                trackListIterator.previous();
                trackListIterator.add(track);
                return true;
            } else if (comparison < 0) {
                // moving to the next track for comparison in trackList.
            }

        }
        trackListIterator.add(track);
        return true;
    }

    //Function for basic GUI implementation.
    private String displayDialogBox(String[] options, String message) {
        Icon icon = new ImageIcon("src/Exploit/org/TrackStore/Wave.png");
        return (String) JOptionPane.showInputDialog(null,
                message,
                "WaveFXâ„¢",
                JOptionPane.INFORMATION_MESSAGE,
                icon,
                options,
                null);
    }

    //Function for getting the names of the tracks inside an album..
    private String[] trackArrayList() {
        String[] trackListArray = new String[this.getTrackList().size()];
        ListIterator<Track> trackListIterator = this.getTrackList().listIterator();

        for (int i = 0; i < this.getTrackList().size(); i++) {
            trackListArray[i] = trackListIterator.next().getTrackName();
        }
        return trackListArray;
    }

    //Function for removing tracks from an album..
    private boolean deleteTrack() {
        String response = this.displayDialogBox(this.trackArrayList(), "Select track to remove from Album : ");
        if (response == null) {
            return false;
        }

        ListIterator<Track> trackListIterator = this.getTrackList().listIterator();
        while (trackListIterator.hasNext()) {
            if (trackListIterator.next().getTrackName().equals(response)) {
                trackListIterator.remove();
                return true;
            }
        }
        return false;
    }

    //Function for renaming a track inside an album object..
    private boolean renameTrack() {
        ListIterator<Track> trackListIterator = this.getTrackList().listIterator();
        String response = this.displayDialogBox(this.trackArrayList(), "Select track to rename : ");
        if (response == null) {
            return false;
        }

        while (trackListIterator.hasNext()) {
            if (trackListIterator.next().getTrackName().equals(response)) {
                return trackListIterator.previous().renameTheTrack();
            }
        }
        return false;
    }

    //Function for playing an album(playing tracks inside album one-by-one)..
    private boolean playAlbum() {
        ListIterator<Track> trackListIterator = this.getTrackList().listIterator();
        boolean goingForward = true;
        int flag = 0;

        if (trackListIterator.hasNext()) {
            flag = trackListIterator.next().waveFxPlayer();
        }

        while (flag != 0) {
            if (flag == 1) {
                if (goingForward) {
                    if (trackListIterator.hasPrevious()) {
                        trackListIterator.previous();
                    }
                    goingForward = false;
                }
                if (trackListIterator.hasPrevious()) {
                    flag = trackListIterator.previous().waveFxPlayer();
                } else {
                    //This is the start of the list or Head element of the linked list.
                    flag = trackListIterator.next().waveFxPlayer();
                }
            }

            if (flag == 5) {
                if (!goingForward) {
                    if (trackListIterator.hasNext()) {
                        trackListIterator.next();
                    }
                    goingForward = true;
                }

                if (trackListIterator.hasNext()) {
                    flag = trackListIterator.next().waveFxPlayer();
                } else {
                    //This is the End of the list.
                    flag = trackListIterator.previous().waveFxPlayer();
                }
            }

            if (flag == 0) {
                return true;
            }
        }
        return false;
    }

    //Function for playing selected tracks from an album..
    private boolean playTrackFromAlbum() {
        String response = this.displayDialogBox(this.trackArrayList(), "Select track to Play : ");
        if (response == null) {
            return false;
        }

        ListIterator<Track> trackListIterator = this.getTrackList().listIterator();
        while (trackListIterator.hasNext()) {
            if (trackListIterator.next().getTrackName().equals(response)) {
                int flag = trackListIterator.previous().waveFxPlayer();
                if (flag == 1 || flag == 5) {
                    this.playAlbum();
                }
                return true;
            }
        }

        return false;
    }

    //Function for driving all the other function and features of an album..
    public boolean albumDriverCode() {
        String[] options = {"Display Album's track", "Play Album", "Rename Album's track", "Remove Album's track"};

        String response = this.displayDialogBox(options, "Select operation to perform : ");

        if (!(response == null)) {
            switch (response) {
                case "Display Album's track":
                    return this.playTrackFromAlbum();
                case "Play Album":
                    return playAlbum();
                case "Rename Album's track":
                    return this.renameTrack();
                case "Remove Album's track":
                    return this.deleteTrack();
            }
        }
        return false;
    }
}