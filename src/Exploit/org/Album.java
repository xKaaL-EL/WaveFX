package Exploit.org;

import javax.swing.*;
import java.util.LinkedList;
import java.util.ListIterator;

public class Album {
    private final LinkedList<Track> trackList = new LinkedList<>();
    private String albumName;

    public Album(Track track) {
        this.albumName = track.getTrackArtist();
        addTrackToAlbum(track);
    }

    public void setAlbumName(String albumName) {
        this.albumName = albumName;
    }

    public LinkedList<Track> getTrackList() {
        return trackList;
    }

    public String getAlbumName() {
        return albumName;
    }

    public boolean addTrackToAlbum(Track track) {
        ListIterator<Track> trackListIterator = this.trackList.listIterator();
        while (trackListIterator.hasNext()) {
            int comparison = trackListIterator.next().getTrackName().compareTo(track.getTrackName());
            if (comparison > 0) {
                trackListIterator.previous();
                trackListIterator.add(track);
                return true;
            } else if (comparison < 0) {
                // moving to the next track for comparison in trackList.
            }
        }
        trackListIterator.add(track);
        return true;
    }

    private String[] trackArrayList() {
        String[] trackListArray = new String[this.trackList.size()];
        ListIterator<Track> trackListIterator = this.trackList.listIterator();
        for (int i = 0; i < this.trackList.size(); i++) {
            trackListArray[i] = trackListIterator.next().getTrackName();
        }
        return trackListArray;
    }

    public boolean deleteTrack() {
        Icon icon = new ImageIcon("src/Exploit/org/Trackstore/WaveFX.png");
        String response = (String) JOptionPane.showInputDialog(null,
                "Select track to remove from Album : ",
                "WaveFX",
                JOptionPane.INFORMATION_MESSAGE,
                icon,
                this.trackArrayList(),
                null);
        if (response == null) {
            return false;
        }
        ListIterator<Track> trackListIterator = this.trackList.listIterator();
        while (trackListIterator.hasNext()) {
            if (trackListIterator.next().getTrackName().equals(response)) {
                trackListIterator.remove();
                return true;
            }
        }
        return false;
    }

    private boolean renameTrack() {
        ListIterator<Track> trackListIterator = this.trackList.listIterator();
        Icon icon = new ImageIcon("src/Exploit/org/Trackstore/WaveFX.png");
        String response = (String) JOptionPane.showInputDialog(null,
                "Select track to rename : ",
                "WaveFX",
                JOptionPane.INFORMATION_MESSAGE,
                icon,
                this.trackArrayList(),
                null);
        if (response == null) {
            return false;
        }
        while (trackListIterator.hasNext()) {
            if (trackListIterator.next().getTrackName().equals(response)) {
                return trackListIterator.previous().renameTheTrack();
            }
        }
        return false;
    }

    public boolean playAlbum() {
        ListIterator<Track> trackListIterator = this.trackList.listIterator();
        boolean goingForward = true;
        int flag = 0;
        if (trackListIterator.hasNext()) {
            flag = trackListIterator.next().waveFxPlayer();
        }
        while (flag != 0) {
            if (flag == 1) {
                if (goingForward) {
                    if (trackListIterator.hasPrevious()) {
                        trackListIterator.previous();
                    }
                    goingForward = false;
                }
                if (trackListIterator.hasPrevious()) {
                    flag = trackListIterator.previous().waveFxPlayer();
                } else {
                    //This is the start of the list or Head element of the linked list.
                    flag = trackListIterator.next().waveFxPlayer();
                }
            }

            if (flag == 5) {
                if (!goingForward) {
                    if (trackListIterator.hasNext()) {
                        trackListIterator.next();
                    }
                    goingForward = true;
                }
                if (trackListIterator.hasNext()) {
                    flag = trackListIterator.next().waveFxPlayer();
                } else {
                    //This is the End of the list.
                    flag = trackListIterator.previous().waveFxPlayer();
                }
            }
            if (flag == 0) {
                return true;
            }
        }
        return false;
    }

    public boolean playTrackFromAlbum() {
        Icon icon = new ImageIcon("src/Exploit/org/Trackstore/WaveFX.png");
        String response = (String) JOptionPane.showInputDialog(null,
                "Select track to Play : ",
                "WaveFX",
                JOptionPane.INFORMATION_MESSAGE,
                icon,
                this.trackArrayList(),
                null);
        if (response == null) {
            return false;
        }
        ListIterator<Track> trackListIterator = this.trackList.listIterator();
        while (trackListIterator.hasNext()) {
            if (trackListIterator.next().getTrackName().equals(response)) {
                int flag = trackListIterator.previous().waveFxPlayer();
                if (flag == 1 || flag == 5) {
                    this.playAlbum();
                }
                return true;
            }
        }
        return false;
    }

    public boolean albumDriverCode() {
        Icon icon = new ImageIcon("src/Exploit/org/Trackstore/WaveFX.png");
        String[] options = {"Display Album's track", "Play Album", "Rename Album's track", "Remove Album's track"};
        String response = (String) JOptionPane.showInputDialog(null,
                "Select operation to perform : ",
                "WaveFX",
                JOptionPane.INFORMATION_MESSAGE,
                icon,
                options,
                null);
        if (!(response == null)) {
            switch (response) {
                case "Display Album's track":
                    return this.playTrackFromAlbum();
                case "Play Album":
                    return playAlbum();
                case "Rename Album's track":
                    return this.renameTrack();
                case "Remove Album's track":
                    return this.deleteTrack();
            }
        }
        return false;
    }
}