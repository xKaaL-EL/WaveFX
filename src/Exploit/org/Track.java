package Exploit.org;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.*;
import java.io.File;
import java.util.ListIterator;

public class Track {
    private String trackName;
    private final String trackArtist;
    private final String trackPath;
    private final String trackDuration;

    public Track(String trackPath) {
        this.trackName = this.getTrackName(this.specifiedNameFormat(trackPath)).trim();
        this.trackArtist = this.getArtistName(this.specifiedNameFormat(trackPath)).trim();
        this.trackPath = trackPath;
        this.trackDuration = calculateDuration(trackPath);
    }

    public String getTrackName() {
        return trackName;
    }

    public String getTrackArtist() {
        return trackArtist;
    }

    public String getTrackPath() {
        return trackPath;
    }

    public String getTrackDuration() {
        return trackDuration;
    }

    public Track getTrack() {
        return this;
    }

    public void setTrackName(String trackName) {
        this.trackName = trackName;
    }

    private String getTrackName(String specifiedName) {
        int lastIndex = specifiedName.lastIndexOf('-');
        if (lastIndex >= 0) {
            String processedString = specifiedName.substring(0, lastIndex);
            return processedString.substring(processedString.lastIndexOf("\\") + 1);
        } else return specifiedName.substring(specifiedName.lastIndexOf("\\") + 1);
    }

    private String getArtistName(String specifiedName) {
        int lastIndex = specifiedName.lastIndexOf('-');
        if (lastIndex >= 0) {
            return specifiedName.substring(specifiedName.lastIndexOf("-") + 1);
        } else return "Unknown";
    }

    private boolean checkWavExtension() {
        String extension = this.getTrackPath().substring(this.getTrackPath().lastIndexOf(".") + 1);
        return extension.equals("wav");
    }

    private String specifiedNameFormat(String trackPath) {
        return trackPath.substring(0, trackPath.lastIndexOf("."));
    }

    public String calculateDuration(String trackPath) {
        try {
            File file = new File(trackPath);
            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(file);
            AudioFormat format = audioInputStream.getFormat();
            long frames = audioInputStream.getFrameLength();
            double durationInSeconds = (frames + 0.0) / format.getFrameRate();
            int minutes = (int) durationInSeconds / 60;
            int seconds = (int) durationInSeconds % 60;
            return String.format("%d:%02d", minutes, seconds);
        } catch (Exception exception) {
            return "--:--";
        }
    }

    public int waveFxPlayer() {
        try {
            File file = new File(this.getTrackPath());
            if (file.exists()) {
                if (this.checkWavExtension()) {

                    AudioInputStream audioStream = AudioSystem.getAudioInputStream(file);
                    Clip clip = AudioSystem.getClip();
                    clip.open(audioStream);
                    int response = 0;
                    Object[] options = {"Previous", "Play", "Pause", "Replay", "Next"};
                    clip.start();
                    while (response != -1) {
                        Icon icon = new ImageIcon("src/Exploit/org/TrackStore/WaveFX.png");
                        response = JOptionPane.showOptionDialog(null,
                                "Playing : " + this.getTrackName() + " (" + this.trackArtist + ")" + "\nDuration : " + this.getTrackDuration(),
                                "WaveFX™ Player",
                                JOptionPane.DEFAULT_OPTION,
                                JOptionPane.INFORMATION_MESSAGE,
                                icon,
                                options,
                                options[2]);
                        switch (response) {
                            case (0):
                                clip.close();
                                return 1;
                            case (1):
                                clip.start();
                                break;
                            case (2):
                                clip.stop();
                                break;
                            case (3):
                                clip.setMicrosecondPosition(0);
                                clip.start();
                                break;
                            case (4):
                                clip.close();
                                return 5;
                            default:
                                clip.close();
                                return 0;
                        }
                    }
                } else System.out.println("Unsupported File Type!");
            } else System.out.println("File do not exist!");
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return -1;
    }

    public boolean addTrackToPlaylist(Playlist playlist) {
        ListIterator<Track> playListIterator = playlist.getPlaylist().listIterator();
        while (playListIterator.hasNext()) {
            int comparison = playListIterator.next().getTrackName().compareTo(this.getTrackName());
            if (comparison == 0) {
                //Successfully added to the playlist.
            }
            if (comparison > 0) {
                playListIterator.previous();
                playListIterator.add(this.getTrack());
                return true;
            } else if (comparison < 0) {
                // moving to the next track for comparison in trackList.
            }
        }
        playListIterator.add(this.getTrack());
        return true;
    }

    public boolean renameTheTrack() {
        Icon icon = new ImageIcon("src/Exploit/org/TrackStore/WaveFX.png");
        String response = (String) JOptionPane.showInputDialog(null,
                "Enter a new name for the Track : ",
                "WaveFX™",
                JOptionPane.INFORMATION_MESSAGE,
                icon,
                null,
                null);
        if (response == null) {
            return false;
        }
        this.setTrackName(response);
        return true;
    }
}
